; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "pyTivo"
#define MyAppVersion "1.6.22"
#define MyAppPublisher "pyTivo Desktop"
#define MyAppURL "https://pytivodesktop.com/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{74DAD9B2-BCE1-41C0-A3E7-DBEEA08C07DB}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=..\install builds\win32\
OutputBaseFilename=pyTivo_{#MyAppVersion}
SetupIconFile=..\desktop\icon.ico
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
SignTool=signtool

AppMutex=pyTivoTray_{{BF213038-4019-49C0-A0AD-9D4419852647}
;CloseApplications=yes
UninstallDisplayName=pyTivo
UninstallDisplayIcon={app}\pyTivo.exe
WizardImageFile=userdocs:pyTivoDesktop\installer\resources\left.bmp
WizardSmallImageFile=userdocs:pyTivoDesktop\installer\resources\logo.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\build\pyTivoTray.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\build\pyTivo.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\build\pyTivoService.exe"; DestDir: "{app}"; Flags: ignoreversion; BeforeInstall: StopPyTivoService
Source: "..\service\install service.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\service\remove service.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\build\dshow\tivomak.exe"; DestDir: "{app}\dshow"; Flags: ignoreversion; Tasks: InstallDSFilter
Source: "..\build\dshow\TiVoDirectShowFilter.dll"; DestDir: "{app}\dshow"; Flags: ignoreversion regserver overwritereadonly uninsremovereadonly replacesameversion uninsnosharedfileprompt; Tasks: InstallDSFilter
Source: "..\build\dshow\TiVoTranscoder.Common.manifest"; DestDir: "{app}\dshow"; Flags: ignoreversion; Tasks: InstallDSFilter
Source: "..\build\dshow\MainConcept\MainConcept.manifest"; DestDir: "{app}\dshow\MainConcept"; Flags: ignoreversion; Tasks: InstallDSFilter
Source: "..\build\bin\*"; DestDir: "{app}\bin"; Flags: ignoreversion createallsubdirs recursesubdirs
Source: "..\build\desktop\*"; DestDir: "{app}\desktop"; Flags: ignoreversion createallsubdirs recursesubdirs

[Icons]
Name: "{group}\pyTivo"; Filename: "{app}\pyTivoTray.exe"
Name: "{group}\pyTivo Desktop"; Filename: "{app}\desktop\pyTivoDesktop.exe"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commonstartup}\pyTivo"; Filename: "{app}\pyTivoTray.exe"; Tasks: StartWithWindows

[Run]
;Filename: "{app}\install service.bat"; Flags: runascurrentuser runhidden waituntilterminated; Tasks: InstallAsService
Filename: "{app}\dshow\tivomak.exe"; Parameters: "-set {code:GetTivoMAK}"; Flags: runasoriginaluser runhidden waituntilterminated; Tasks: InstallDSFilter
Filename: "{app}\pyTivoTray.exe"; Parameters: "--show-desktop"; Flags: nowait postinstall runasoriginaluser; Description: "Start pyTivo Now"

[Registry]
Root: "HKLM"; Subkey: "Software\Classes\.TiVo"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\Media Type\Extensions\.TiVo"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\Multimedia\WMPlayer\Extensions\.TiVo"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\DefaultIcon"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\Shell"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\Shell\Play"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\Shell\Play\Command"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\Shell\Play\Command"; ValueType: string; ValueData: """{pf32}\Windows Media Player\wmplayer.exe"" /Play ""%L"""; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\Shell\Play"; ValueType: string; ValueName: "&Play"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording\DefaultIcon"; ValueType: string; ValueData: "{sys}\wmploc.dll,-730"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\TivoRecording"; ValueType: string; ValueData: "TiVo Recording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\.TiVo"; ValueType: string; ValueData: "TivoRecording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\.TiVo"; ValueType: string; ValueName: "PerceivedType"; ValueData: "video"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\.TiVo"; ValueType: string; ValueName: "Content Type"; ValueData: "video/mpeg"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Classes\Media Type\Extensions\.TiVo"; ValueType: string; ValueName: "Source Filter"; ValueData: "{{A65FA79B-2D2C-42BD-BAB2-D474B8F01248}"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\MediaPlayer\Player\Extensions\Descriptions"; ValueType: string; ValueName: "TivoRecording"; ValueData: "TiVo Recording (*.TiVo)"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\MediaPlayer\Player\Extensions\MUIDescriptions"; ValueType: string; ValueName: "TivoRecording"; ValueData: "TiVo Recording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\MediaPlayer\Player\Extensions\Types"; ValueType: string; ValueName: "TivoRecording"; ValueData: "*.TiVo"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\MediaPlayer\MLS\Extensions"; ValueType: string; ValueName: "TiVo"; ValueData: "video"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\Multimedia\WMPlayer\Extensions\.TiVo"; ValueType: dword; ValueName: "Runtime"; ValueData: "7"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKLM"; Subkey: "Software\Microsoft\Multimedia\WMPlayer\Extensions\.TiVo"; ValueType: dword; ValueName: "Permissions"; ValueData: "143"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: ".TiVo"; ValueType: string; ValueData: "TivoRecording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: ".TiVo"; ValueType: string; ValueName: "Content Type"; ValueData: "video/mpeg"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: ".TiVo"; ValueType: string; ValueName: "PerceivedType"; ValueData: "video"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "TivoRecording"; ValueType: string; ValueData: "TiVo Recording"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "TivoRecording\DefaultIcon"; ValueData: "{sys}\wmploc.dll,-730"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "TivoRecording\Shell\Play"; ValueType: string; ValueName: "&Play"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "TivoRecording\Shell\Play\Command"; ValueType: string; ValueData: """{pf32}\Windows Media Player\wmplayer.exe"" /Play ""%L"""; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "Media Type\Extensions\.TiVo"; ValueType: string; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter
Root: "HKCR"; Subkey: "Media Type\Extensions\.TiVo"; ValueType: string; ValueName: "Source Filter"; ValueData: "{{A65FA79B-2D2C-42BD-BAB2-D474B8F01248}"; Flags: createvalueifdoesntexist; Tasks: InstallDSFilter

[Tasks]
Name: "StartWithWindows"; Description: "Start automatically when Windows starts"
Name: "InstallDSFilter"; Description: "Install TiVo DirectShow filter (only use this option if you do not have TiVo Desktop installed)"
;Name: "InstallAsService"; Description: "Install pyTivo as a service (this requires admin rights)"; Flags: unchecked

[Dirs]
Name: "{app}\desktop\desktop"
Name: "{app}\desktop\locales\locales"
Name: "{app}\desktop\resources\resources"
Name: "{app}\bin\jre\"
Name: "{app}\bin\jre\bin\"
Name: "{app}\bin\jre\bin\client\"
Name: "{app}\bin\jre\bin\dtplugin\"
Name: "{app}\bin\jre\bin\plugin2\"
Name: "{app}\bin\jre\lib\"
Name: "{app}\bin\jre\lib\applet\"
Name: "{app}\bin\jre\lib\cmm\"
Name: "{app}\bin\jre\lib\deploy\"
Name: "{app}\bin\jre\lib\ext\"
Name: "{app}\bin\jre\lib\fonts\"
Name: "{app}\bin\jre\lib\i386\"
Name: "{app}\bin\jre\lib\images\"
Name: "{app}\bin\jre\lib\images\cursors\"
Name: "{app}\bin\jre\lib\jfr\"
Name: "{app}\bin\jre\lib\management\"
Name: "{app}\bin\jre\lib\security\"
Name: "{app}\bin\jre\"
Name: "{app}\bin\jre\bin\"
Name: "{app}\bin\jre\bin\client\"
Name: "{app}\bin\jre\bin\dtplugin\"
Name: "{app}\bin\jre\bin\plugin2\"
Name: "{app}\bin\jre\lib\"
Name: "{app}\bin\jre\lib\applet\"
Name: "{app}\bin\jre\lib\cmm\"
Name: "{app}\bin\jre\lib\deploy\"
Name: "{app}\bin\jre\lib\ext\"
Name: "{app}\bin\jre\lib\fonts\"
Name: "{app}\bin\jre\lib\i386\"
Name: "{app}\bin\jre\lib\images\"
Name: "{app}\bin\jre\lib\images\cursors\"
Name: "{app}\bin\jre\lib\jfr\"
Name: "{app}\bin\jre\lib\management\"
Name: "{app}\bin\jre\lib\security\"
Name: "{app}\bin\jre\bin\"
Name: "{app}\bin\jre\bin\client\"
Name: "{app}\bin\jre\bin\dtplugin\"
Name: "{app}\bin\jre\bin\plugin2\"
Name: "{app}\bin\jre\lib\"
Name: "{app}\bin\jre\lib\applet\"
Name: "{app}\bin\jre\lib\cmm\"
Name: "{app}\bin\jre\lib\deploy\"
Name: "{app}\bin\jre\lib\ext\"
Name: "{app}\bin\jre\lib\fonts\"
Name: "{app}\bin\jre\lib\i386\"
Name: "{app}\bin\jre\lib\images\"
Name: "{app}\bin\jre\lib\images\cursors\"
Name: "{app}\bin\jre\lib\jfr\"
Name: "{app}\bin\jre\lib\management\"
Name: "{app}\bin\jre\lib\security\"

[UninstallRun]
Filename: "{app}\remove service.bat"; Flags: runhidden waituntilterminated

[Code]
var
  TivoOptsPage: TWizardPage;
  TivoMAKEdit: TEdit;
  TivoMAKCtrlDown: Boolean;
  TivoPathEdit: TEdit;
  TivoPathBrowseButton: TButton;
  TivoPathPublish: TCheckBox;

function GetTivoMAK(Parameter: string): string;
begin
  Result := TivoMAKEdit.Text;
end;

procedure StopPyTivoService();
var
   ResultCode: Integer;
begin
   if Exec(ExpandConstant('{app}\pyTivoService.exe'), 'stop', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
     begin
       Exec(ExpandConstant('{app}\pyTivoService.exe'), 'remove', '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
     end 
end;

procedure BrowseClick(Sender : TObject);
var
  Dir : String;
begin
  Dir := TivoPathEdit.Text;
  if BrowseForFolder('Select Folder', Dir, true) then
    TivoPathEdit.Text := Dir;
end;

procedure TivoMAKEditKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  TivoMAKCtrlDown := false;
  if Shift = [ssCtrl] then
    TivoMAKCtrlDown := true;
end;

procedure TivoMAKEditKeyPress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  // allow only numbers
  KeyCode := Ord(Key);
  if not ((KeyCode = 8) or (TivoMAKCtrlDown = true) or ((KeyCode >= 48) and (KeyCode <= 57))) then
    Key := #0;
end;

function AuthPage(Page: TWizardPage) : Boolean;
var
  MAK : String;
  Dir : String;
begin
  Result := True;
  MAK := TivoMAKEdit.Text;
  Dir := TivoPathEdit.Text;

  if MAK <> '' then
    begin
      if Length(MAK) < 10 then
        begin
          MsgBox('Invalid Media Access Key', mbError, MB_OK);
          Result := False;
        end
      else
        begin
          if Dir <> '' then
            begin
              //if not DirExists(Dir) then
              //  begin
              //    MsgBox('TiVo recordings folder must be a valid path', mbError, MB_OK);
               //   Result := False;
              //  end
            end
          else
            begin
              MsgBox('Please select a TiVo recordings folder', mbError, MB_OK);
              Result := False; 
            end
        end
    end
  else
    begin
      MsgBox('Please enter your TiVo Media Access Key', mbError, MB_OK);
      Result := False;
    end    
end; 

procedure InitializeWizard;
var
  TivoMAKLabel: TLabel;
  TivoPathLabel: TLabel;

begin
  TivoOptsPage := CreateCustomPage(wpSelectTasks, 'Set options for ToGo functions', '');
  TivoOptsPage.OnNextButtonClick := @AuthPage;

  TivoMAKLabel := TLabel.Create(WizardForm);
  TivoMAKLabel.Parent := TivoOptsPage.Surface;
  TivoMAKLabel.Left := 0;
  TivoMAKLabel.Top := 0;
  TivoMAKLabel.Caption := 'TiVo Media Access Key';

  TivoMAKEdit := TEdit.Create(WizardForm);
  TivoMAKEdit.Parent := TivoOptsPage.Surface;
  TivoMAKEdit.Left := 0;
  TivoMAKEdit.Top :=  TivoMAKLabel.Top + TivoMAKLabel.Height + 6;
  TivoMAKEdit.Width := 300;
  TivoMAKEdit.MaxLength := 10;  
  TivoMAKEdit.OnKeyDown := @TivoMAKEditKeyDown;
  TivoMAKEdit.OnKeyPress := @TivoMAKEditKeyPress; 

  TivoPathLabel := TLabel.Create(WizardForm);
  TivoPathLabel.Parent := TivoOptsPage.Surface;
  TivoPathLabel.Left := 0;
  TivoPathLabel.Top := TivoMAKEdit.Top + TivoMAKEdit.Height + 12;
  TivoPathLabel.Caption := 'TiVo recordings folder'

  TivoPathEdit := TEdit.Create(WizardForm);
  TivoPathEdit.Parent := TivoOptsPage.Surface;
  TivoPathEdit.Left := 0;
  TivoPathEdit.Top :=  TivoPathLabel.Top + TivoPathLabel.Height + 6;
  TivoPathEdit.Width := 300;

  TivoPathBrowseButton := TButton.Create(WizardForm);
  TivoPathBrowseButton.Parent := TivoOptsPage.Surface;
  TivoPathBrowseButton.Left := TivoPathEdit.Left + TivoPathEdit.Width + 6;
  TivoPathBrowseButton.Top :=  TivoPathEdit.Top;
  TivoPathBrowseButton.Height := TivoPathEdit.Height;
  TivoPathBrowseButton.Width := 70;
  TivoPathBrowseButton.Caption := 'Browse';
  TivoPathBrowseButton.OnClick := @BrowseClick;   
  
  TivoPathPublish := TCheckBox.Create(WizardForm);
  TivoPathPublish.Parent := TivoOptsPage.Surface;
  TivoPathPublish.Left := 0;
  TivoPathPublish.Top :=  TivoPathEdit.Top + TivoPathEdit.Height + 6;
  TivoPathPublish.Width := 300; 
  TivoPathPublish.Caption := 'Publish recordings folder as video share';
  TivoPathPublish.Checked := true;
      
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = TivoOptsPage.ID then
    begin
//      if IsTaskSelected('InstallAsService') then
//        begin
//          TivoMAKEdit.Text := GetIniString('Server', 'tivo_mak', '', ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
//          TivoPathEdit.Text := GetIniString('Server', 'togo_path', '', ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');        
//        end
//      else
//        begin
      TivoMAKEdit.Text := GetIniString('Server', 'tivo_mak', '', ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
      TivoPathEdit.Text := GetIniString('Server', 'togo_path', '', ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
//        end
    end
end;

function StrSplit(Text: String; Separator: String): TArrayOfString;
var
  i, p: Integer;
  Dest: TArrayOfString; 
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
  Result := Dest
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
  ShareName: String;
  PathList: TArrayOfString; 

begin
  Result := True;
  ShareName := 'TiVo Recordings'
  PathList := StrSplit(TivoPathEdit.Text, '\');

  if GetArrayLength(PathList) > 0 then
    begin
      ShareName := PathList[GetArrayLength(PathList)-1];
      if GetArrayLength(PathList) > 1 then
        begin
          if ShareName = '' then
            begin
              ShareName := PathList[GetArrayLength(PathList)-2];
            end 
        end
    end;  

  if CurPageID = TivoOptsPage.ID then
    begin
//      if IsTaskSelected('InstallAsService') then
//        begin
//           if not DirExists(ExpandConstant('{commonappdata}')+'\{#MyAppName}') then
//              begin
//                 CreateDir(ExpandConstant('{commonappdata}')+'\{#MyAppName}')
//              end;

//           if not FileExists(ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf') then
//              begin
//                 SaveStringToFile(ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf', '[Server]', False);
//              end;


//           SetIniString('Server', 'tivo_mak', TivoMAKEdit.Text, ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
//           SetIniString('Server', 'togo_path', TivoPathEdit.Text, ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
           
//           if TivoPathPublish.Checked then
//             begin
//               SetIniString(ShareName, 'type', 'video', ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
//               SetIniString(ShareName, 'path', TivoPathEdit.Text, ExpandConstant('{commonappdata}')+'\{#MyAppName}\{#MyAppName}.conf');               
//             end              
//        end
//      else
//        begin
           if not DirExists(ExpandConstant('{userappdata}')+'\{#MyAppName}') then
              begin
                 CreateDir(ExpandConstant('{userappdata}')+'\{#MyAppName}')
              end;

           if not FileExists(ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf') then
              begin
                 SaveStringToFile(ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf', '[Server]', False);
              end;
                         
           SetIniString('Server', 'tivo_mak', TivoMAKEdit.Text, ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
           SetIniString('Server', 'togo_path', TivoPathEdit.Text, ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');

           if TivoPathPublish.Checked then
             begin
               SetIniString(ShareName, 'type', 'video', ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');
               SetIniString(ShareName, 'path', TivoPathEdit.Text, ExpandConstant('{userappdata}')+'\{#MyAppName}\{#MyAppName}.conf');               
             end  
//        end
    end
end;
